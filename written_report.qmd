---
title: "Write Up for Job Recommender System"
author: "Group 22"
format: html
editor: visual
---

# Introduction

Let’s be honest—job hunting sucks. It’s like online dating but worse, because at least bad dates come with free food (well, except for Ryan who loses money). That’s why we decided to band together and build this job recommendation system, to turn our shared suffering into a creative outlet. We began this project by looking for data. We were able to get access to the Data Science UCSB member registration dataset, which was compiled from Google Form surveys completed during sign-ups. This dataset gave us a starting point, as it contained valuable insights into member skill-sets, interests, majors, years, and more, making it perfect for tailoring recommendations to our members’ unique needs. Afterwards, we looked for a job dataset, to which we found with kaggle, which contained predictors such as company, job title, experience locations, skills required and perks to analyze. By combining machine learning techniques with domain knowledge, we aim to make job hunting a little less painful for everyone. 


# Methodology

We started with cleaning the two datasets by checking for and removing or filling missing values, removing duplicates and useless columns, and factoring categorical variables. Diving deeper into the datasets, we wanted to explore the dataset to find any useful information or trends normally not visible. We listed out variables or groupings that sounded important like technical skills, graduation year, major, work experience, job type, skills preferred, and many others. Thus, different graphs and visualizations were made stemming from those categories. We found that certain coding languages correlate to other coding languages, most of the members are data science majors, average internship count goes up along with school year, most job listings in the dataset are internships, and computer science is the most commonly listed skill. This was surprising because a data science job listing had companies looking for computer science skills more than data science skills. This could be a factor to why the job hunt isn’t going so well for data science majors. We also noticed some weird trends that didn’t make sense at first glance as well. For example, graphs grouped by graduation year are left skewed. Looking at the graph below, it seems as if 3rd year students have more skills than 4th year students which logically doesn’t make sense. However, after looking at the distribution for graduation years we can see that the number of students in their 4th year is significantly less than 3rd year students. Thus, explaining the reason why the count of 4th years who have these skills are far less. Other than these externalities we were able to identify very useful trends within skill sets, data science knowledge, and experience (mentioned before) that will help with building our recommendation engine.


##### insert graphs accordingly (read description)


# Recommendation System

The first step in building the recommendation system is to preprocess both the dataset containing information about each member and the dataset with available jobs and internships. Since some columns of both datasets are numerical, such as `intern_job_count` and `grad_year`, a categorization function was used to convert these values into text. We then combined all relevant columns of the `members` dataset and the `internships` dataset into a singular `text` column that can be tokenized. To preprocess the data, we converted all text to lowercase, removed any punctuation, and tokenized all words from the `text` column using the `nltk` library. We also used the Porter stemmer to remove any stop words, or commonly used words that do not carry any meaning. After these preprocessing steps were applied to each respective dataset on the `text` column, we combined all preprocessed data into one variable to use for vectorization. To convert the textual data into numerical form, we implemented TF-IDF (Term Frequency-Inverse Document Frequency) vectorization using the `sklearn` library. This transforms the text into a matrix of TF-IDF features, quantifying how important a word is relative to a corpus. A TF-IDF matrix is computed after using the `fit_transform` function to compute the TF_IDF scores for each term. This matrix is then split into two, one for the student data and one for the job data.

Moving on to the recommendation system, it implements a content-based filtering recommendation system that matches students (club members) with relevant internship opportunities based on their individual profiles. The system leverages text preprocessing and TF-IDF vectorization to transform unstructured textual data—like student skills, location preferences, and internship requirements—into numerical representations. Using cosine similarity, the system quantifies how closely a student's profile matches the attributes of a given internship, such as job qualifications, skills, and location. A heuristic score is calculated by combining these similarity measures, where components like location, experience, and skills are weighted equally to produce an overall "match score."

To enhance and automate this recommendation process, the labeled heuristic scores serve as the target variable for training a Random Forest Regressor—an ensemble machine learning model that uses multiple decision trees to predict scores for unseen student-internship pairs. Input features, such as `student_id` and `internship_id`, are one-hot encoded to create a format suitable for model training. The trained model generates predictions that rank internships by their relevance to a specific student's profile. This approach focuses on content-based filtering by using features directly related to the content of both student and internship data, ensuring personalized recommendations based solely on the attributes of the user and items.

###### insert image or recommendations

The final output can be represented as a ranked table displaying internship recommendations for specific students. Each row shows an internship title alongside its predicted relevance score, which quantifies how well the internship matches the student's skills, experiences, and preferences. Higher scores indicate stronger matches. Visualizing this list helps clearly demonstrate the model's predictions. For instance, the top 5 recommended internships could be highlighted, showcasing the system's ability to deliver tailored and meaningful opportunities for individual students.


# Conclusion

In conclusion, our job recommendation system takes the pain out of job hunting into a smarter process, taking out the tediousness of online dating (minus the free food, unless you’re Ryan, who again, ends up losing money to pay for everything). Our model was able to generate internship recommendations by leveraging content-based filtering and a Random Forest Regressor, which assigned relevance scores based on how closely a student's skills, experiences, and preferences aligned with the attributes of each internship. The final results showed that while the model effectively captured general trends between student and internship profiles, there is room for improvement, particularly in cases where the data lacked sufficient detail or diversity. 

As for next steps, we want to turn this into something usable for the Data Science UCSB Club members–but first we need to improve the accuracy. A possible reason why our accuracy is so low is because our predictors did not provide enough information about our candidates, leading to us having to generate fake data to align with the scope of the project. Therefore, for next year’s member registration google form, we’ve decided to add more survey questions to help us understand the needs of our users a lot better. We were also thinking about integrating the recommendation system to the Data Science UCSB discord bot, which currently has a built in weekly LinkedIn Scraper that DMs certain members personalized jobs. Lastly, we were also considering utilizing more advanced machine learning models to further improve the accuracy of the recommendations. By continuing to evolve the system, we can make job hunting a whole lot less painful for everyone. 


